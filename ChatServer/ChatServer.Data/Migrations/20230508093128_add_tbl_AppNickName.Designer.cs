// <auto-generated />
using System;
using ChatServer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatServer.Data.Migrations
{
    [DbContext(typeof(AppChatDbContext))]
    [Migration("20230508093128_add_tbl_AppNickName")]
    partial class add_tbl_AppNickName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatServer.Data.Entities.AppColorConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundColorCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("TextColorCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppColorConversation", (string)null);
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId2");

                    b.ToTable("AppConversation", (string)null);
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppFriendRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasIndex("StatusId");

                    b.ToTable("AppFriendRequest", (string)null);
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppFriendShip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId2");

                    b.ToTable("AppFriendShip", (string)null);
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppInfoConversation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("MainEmoji")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ConversationId");

                    b.ToTable("AppInfoConversation", (string)null);
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsLiked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotify")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlImage")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("AppMessage", (string)null);
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppNickname", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConversationId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.ToTable("AppNickname", (string)null);
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AppRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Quản trị hệ thống",
                            Name = "Admin",
                            UpdatedDate = new DateTime(2023, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desc = "Người dùng trong hệ thống",
                            Name = "User",
                            UpdatedDate = new DateTime(2023, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("AppRoleId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("BlockedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BlockedTo")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<string>("MessageKey")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<string>("PhoneNumber1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("AppUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Thành phố Cần Thơ",
                            AppRoleId = 1,
                            CreatedBy = -1,
                            CreatedDate = new DateTime(2023, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ntt18082001@gmail.com",
                            FullName = "Tiến Sĩ",
                            IsOnline = false,
                            MessageKey = "ồ<ằặẫ3[ẐHơÁỦ.àÍừ3{ÃoUẾũệỆḨ=ỎĂờEỐẰéĈḤÓỤĨệ@Ịòỏ&",
                            PasswordHash = new byte[] { 11, 27, 187, 138, 193, 197, 134, 70, 129, 44, 237, 88, 115, 54, 226, 187, 221, 103, 215, 121, 131, 46, 80, 49, 154, 29, 179, 108, 107, 11, 143, 163, 21, 255, 95, 170, 23, 48, 130, 85, 161, 253, 160, 42, 31, 220, 63, 98, 138, 197, 255, 210, 79, 2, 219, 95, 8, 135, 35, 84, 31, 42, 100, 211 },
                            PasswordSalt = new byte[] { 228, 111, 208, 113, 209, 206, 222, 8, 151, 64, 145, 235, 199, 38, 157, 139, 72, 122, 185, 184, 148, 53, 76, 113, 86, 56, 133, 196, 32, 59, 77, 123, 53, 52, 124, 14, 226, 132, 67, 165, 70, 125, 38, 104, 173, 18, 12, 188, 115, 71, 11, 50, 223, 73, 0, 37, 149, 172, 29, 115, 149, 153, 34, 245, 10, 151, 13, 31, 32, 244, 125, 217, 25, 9, 87, 215, 110, 83, 215, 225, 150, 113, 127, 183, 134, 4, 218, 176, 72, 28, 26, 164, 128, 226, 230, 168, 175, 248, 44, 35, 116, 208, 242, 103, 41, 169, 231, 141, 232, 138, 189, 100, 212, 69, 240, 232, 119, 74, 195, 118, 56, 190, 204, 224, 8, 124, 183, 174 },
                            PhoneNumber1 = "0928666158",
                            PhoneNumber2 = "0928666156",
                            UpdatedBy = -1,
                            UpdatedDate = new DateTime(2023, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Thành phố Cần Thơ",
                            AppRoleId = 2,
                            CreatedBy = -1,
                            CreatedDate = new DateTime(2023, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ntt180801@gmail.com",
                            FullName = "Tiến Sĩ 2",
                            IsOnline = false,
                            MessageKey = "ồ<ằặẫ3[ẐHơÁỦ.àÍừ3{ÃoUẾũệỆḨ=ỎĂờEỐẰéĈḤÓỤĨệ@Ịòỏ&",
                            PasswordHash = new byte[] { 11, 27, 187, 138, 193, 197, 134, 70, 129, 44, 237, 88, 115, 54, 226, 187, 221, 103, 215, 121, 131, 46, 80, 49, 154, 29, 179, 108, 107, 11, 143, 163, 21, 255, 95, 170, 23, 48, 130, 85, 161, 253, 160, 42, 31, 220, 63, 98, 138, 197, 255, 210, 79, 2, 219, 95, 8, 135, 35, 84, 31, 42, 100, 211 },
                            PasswordSalt = new byte[] { 228, 111, 208, 113, 209, 206, 222, 8, 151, 64, 145, 235, 199, 38, 157, 139, 72, 122, 185, 184, 148, 53, 76, 113, 86, 56, 133, 196, 32, 59, 77, 123, 53, 52, 124, 14, 226, 132, 67, 165, 70, 125, 38, 104, 173, 18, 12, 188, 115, 71, 11, 50, 223, 73, 0, 37, 149, 172, 29, 115, 149, 153, 34, 245, 10, 151, 13, 31, 32, 244, 125, 217, 25, 9, 87, 215, 110, 83, 215, 225, 150, 113, 127, 183, 134, 4, 218, 176, 72, 28, 26, 164, 128, 226, 230, 168, 175, 248, 44, 35, 116, 208, 242, 103, 41, 169, 231, 141, 232, 138, 189, 100, 212, 69, 240, 232, 119, 74, 195, 118, 56, 190, 204, 224, 8, 124, 183, 174 },
                            PhoneNumber1 = "0123456789",
                            PhoneNumber2 = "0123456789",
                            UpdatedBy = -1,
                            UpdatedDate = new DateTime(2023, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "tiensi"
                        });
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppVerifyCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("TokenString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppVerifyCode", (string)null);
                });

            modelBuilder.Entity("ChatServer.Data.Entities.MstStatusRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("MstStatusRequest", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusName = "Đang chờ"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusName = "Đã chấp nhận"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusName = "Đã từ chối"
                        });
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppConversation", b =>
                {
                    b.HasOne("ChatServer.Data.Entities.AppUser", "AppUser1")
                        .WithMany("ConversationsOfUser1")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatServer.Data.Entities.AppUser", "AppUser2")
                        .WithMany("ConversationsOfUser2")
                        .HasForeignKey("UserId2")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser1");

                    b.Navigation("AppUser2");
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppFriendRequest", b =>
                {
                    b.HasOne("ChatServer.Data.Entities.AppUser", "UserReceiveRequest")
                        .WithMany("ReceiveRequests")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatServer.Data.Entities.AppUser", "UserSendRequest")
                        .WithMany("SendRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatServer.Data.Entities.MstStatusRequest", "StatusRequest")
                        .WithMany("AppFriendRequests")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatusRequest");

                    b.Navigation("UserReceiveRequest");

                    b.Navigation("UserSendRequest");
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppFriendShip", b =>
                {
                    b.HasOne("ChatServer.Data.Entities.AppUser", "AppUser1")
                        .WithMany("AppFriends1")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatServer.Data.Entities.AppUser", "AppUser2")
                        .WithMany("AppFriends2")
                        .HasForeignKey("UserId2")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AppUser1");

                    b.Navigation("AppUser2");
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppInfoConversation", b =>
                {
                    b.HasOne("ChatServer.Data.Entities.AppColorConversation", "AppColorConversation")
                        .WithMany("AppInfoConversations")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatServer.Data.Entities.AppConversation", "AppConversation")
                        .WithMany("AppInfoConversations")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppColorConversation");

                    b.Navigation("AppConversation");
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppMessage", b =>
                {
                    b.HasOne("ChatServer.Data.Entities.AppConversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatServer.Data.Entities.AppUser", "Receiver")
                        .WithMany("ReceiveMessage")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ChatServer.Data.Entities.AppUser", "Sender")
                        .WithMany("SendMessage")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppNickname", b =>
                {
                    b.HasOne("ChatServer.Data.Entities.AppConversation", "AppConversation")
                        .WithMany("AppNicknames")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppConversation");
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppUser", b =>
                {
                    b.HasOne("ChatServer.Data.Entities.AppRole", "AppRole")
                        .WithMany("AppUsers")
                        .HasForeignKey("AppRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppVerifyCode", b =>
                {
                    b.HasOne("ChatServer.Data.Entities.AppUser", "AppUser")
                        .WithMany("AppVerifyCodeNavigation")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppColorConversation", b =>
                {
                    b.Navigation("AppInfoConversations");
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppConversation", b =>
                {
                    b.Navigation("AppInfoConversations");

                    b.Navigation("AppNicknames");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppRole", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("ChatServer.Data.Entities.AppUser", b =>
                {
                    b.Navigation("AppFriends1");

                    b.Navigation("AppFriends2");

                    b.Navigation("AppVerifyCodeNavigation");

                    b.Navigation("ConversationsOfUser1");

                    b.Navigation("ConversationsOfUser2");

                    b.Navigation("ReceiveMessage");

                    b.Navigation("ReceiveRequests");

                    b.Navigation("SendMessage");

                    b.Navigation("SendRequests");
                });

            modelBuilder.Entity("ChatServer.Data.Entities.MstStatusRequest", b =>
                {
                    b.Navigation("AppFriendRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
